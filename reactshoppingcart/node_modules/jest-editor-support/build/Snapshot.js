"use strict";

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.object.assign.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.entries.js");

var _traverse = _interopRequireDefault(require("@babel/traverse"));

var _jestSnapshot = require("jest-snapshot");

var _babel_parser = require("./parsers/babel_parser");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var describeVariants = Object.assign(Object.create(null), {
  describe: true,
  fdescribe: true,
  xdescribe: true
});
var base = Object.assign(Object.create(null), {
  describe: true,
  it: true,
  test: true
});
var decorators = Object.assign(Object.create(null), {
  only: true,
  skip: true
});
var validParents = Object.assign(Object.create(null), base, describeVariants, Object.assign(Object.create(null), {
  fit: true,
  xit: true,
  xtest: true
}));

var isValidMemberExpression = function isValidMemberExpression(node) {
  return node.object && base[node.object.name] && node.property && decorators[node.property.name];
};

var isDescribe = function isDescribe(node) {
  return describeVariants[node.name] || isValidMemberExpression(node) && node.object.name === 'describe';
};

var isValidParent = function isValidParent(parent) {
  return parent.callee && (validParents[parent.callee.name] || isValidMemberExpression(parent.callee));
};

var getArrayOfParents = function getArrayOfParents(path) {
  var result = [];
  var parent = path.parentPath;

  while (parent) {
    result.unshift(parent.node);
    parent = parent.parentPath;
  }

  return result;
};

var buildName = function buildName(snapshotNode, parents, position) {
  var fullName = parents.map(function (parent) {
    return parent.arguments[0].value;
  }).join(' ');
  return _jestSnapshot.utils.testNameToKey(fullName, position);
};

var Snapshot = /*#__PURE__*/function () {
  function Snapshot(parser, customMatchers, projectConfig) {
    var _this = this;

    _classCallCheck(this, Snapshot);

    this._parser = parser || _babel_parser.getASTfor;
    this._matchers = ['toMatchSnapshot', 'toThrowErrorMatchingSnapshot'].concat(customMatchers || []);
    this._projectConfig = projectConfig;
    this._resolverPromise = (0, _jestSnapshot.buildSnapshotResolver)(this._projectConfig || {}, function () {
      return Promise.resolve();
    }).then(function (resolver) {
      _this.snapshotResolver = resolver;
    });
  }

  _createClass(Snapshot, [{
    key: "parse",
    value: function parse(filePath) {
      var _this2 = this;

      var verbose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var fileNode;

      try {
        fileNode = this._parser(filePath);
      } catch (error) {
        if (verbose) {
          // eslint-disable-next-line no-console
          console.warn(error);
        }

        return [];
      }

      var Visitors = {
        Identifier: function Identifier(path, found, matchers) {
          if (matchers.indexOf(path.node.name) >= 0) {
            found.push({
              node: path.node,
              parents: getArrayOfParents(path)
            });
          }
        }
      };
      var found = [];
      (0, _traverse["default"])(fileNode, {
        enter: function enter(path) {
          var visitor = Visitors[path.node.type];

          if (visitor != null) {
            visitor(path, found, _this2._matchers);
          }
        }
      });
      return found.map(function (f) {
        return {
          node: f.node,
          parents: f.parents.filter(isValidParent)
        };
      });
    }
  }, {
    key: "_getSnapshotResolver",
    value: function () {
      var _getSnapshotResolver2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.snapshotResolver) {
                  _context.next = 3;
                  break;
                }

                _context.next = 3;
                return this._resolverPromise;

              case 3:
                return _context.abrupt("return", this.snapshotResolver);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _getSnapshotResolver() {
        return _getSnapshotResolver2.apply(this, arguments);
      }

      return _getSnapshotResolver;
    }()
    /**
     * look for snapshot content for the given test.
     * @param {*} filePath
     * @param {*} name can be a literal string or a regex pattern.
     * @returns the content of the snapshot, if exist. If name is a string, a string will be returned. If name is a RegExp,
     * a SnapshotData object will be returned with all matched snapshots. If nothing matched, null will be returned.
     * @throws throws exception if the snapshot version mismatched or any other unexpected error.
     */

  }, {
    key: "getSnapshotContent",
    value: function () {
      var _getSnapshotContent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(filePath, name) {
        var snapshotResolver, snapshotPath, snapshots, regex, data;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._getSnapshotResolver();

              case 2:
                snapshotResolver = _context2.sent;
                snapshotPath = snapshotResolver.resolveSnapshotPath(filePath);
                snapshots = _jestSnapshot.utils.getSnapshotData(snapshotPath, 'none').data;

                if (!(typeof name === 'string')) {
                  _context2.next = 7;
                  break;
                }

                return _context2.abrupt("return", snapshots[name]);

              case 7:
                regex = name;
                data = {};
                Object.entries(snapshots).forEach(function (_ref) {
                  var _ref2 = _slicedToArray(_ref, 2),
                      key = _ref2[0],
                      value = _ref2[1];

                  if (regex.test(key)) {
                    data[key] = value;
                  }
                });
                return _context2.abrupt("return", Object.entries(data).length > 0 ? data : null);

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSnapshotContent(_x, _x2) {
        return _getSnapshotContent.apply(this, arguments);
      }

      return getSnapshotContent;
    }()
  }, {
    key: "getMetadataAsync",
    value: function () {
      var _getMetadataAsync = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(filePath) {
        var verbose,
            _args3 = arguments;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                verbose = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;
                _context3.next = 3;
                return this._getSnapshotResolver();

              case 3:
                return _context3.abrupt("return", this.getMetadata(filePath, verbose));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getMetadataAsync(_x3) {
        return _getMetadataAsync.apply(this, arguments);
      }

      return getMetadataAsync;
    }()
  }, {
    key: "getMetadata",
    value: function getMetadata(filePath) {
      var verbose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!this.snapshotResolver) {
        throw new Error('snapshotResolver is not ready yet, consider migrating to "getMetadataAsync" instead');
      }

      var snapshotPath = this.snapshotResolver.resolveSnapshotPath(filePath);
      var snapshotNodes = this.parse(filePath, verbose);

      var snapshots = _jestSnapshot.utils.getSnapshotData(snapshotPath, 'none').data;

      var lastParent = null;
      var count = 1;
      return snapshotNodes.map(function (snapshotNode) {
        var parents = snapshotNode.parents;
        var innerAssertion = parents[parents.length - 1];

        if (lastParent !== innerAssertion) {
          lastParent = innerAssertion;
          count = 1;
        }

        var result = {
          content: undefined,
          count: count,
          exists: false,
          name: '',
          node: snapshotNode.node
        };
        count += 1;

        if (!innerAssertion || isDescribe(innerAssertion.callee)) {
          // An expectation inside describe never gets executed.
          return result;
        }

        result.name = buildName(snapshotNode, parents, result.count);

        if (snapshots[result.name]) {
          result.exists = true;
          result.content = snapshots[result.name];
        }

        return result;
      });
    }
  }]);

  return Snapshot;
}();

exports["default"] = Snapshot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,